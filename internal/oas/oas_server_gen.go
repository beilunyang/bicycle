// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// GetAddresses implements getAddresses operation.
	//
	// Get all created addresses by `user_id`.
	//
	// GET /v2/users/{user_id}/addresses
	GetAddresses(ctx context.Context, params GetAddressesParams) (GetAddressesRes, error)
	// GetIncome implements getIncome operation.
	//
	// Get income for deposits by `user_id`. The total amount of funds that came to the deposit for the
	// entire time. Funds sent from the deposit to the hot wallet or all funds received to the deposit
	// are taken into account, depending on the service settings. Counting side field options
	// `hot_wallet`, `deposit`.
	//
	// GET /v2/users/{user_id}/income
	GetIncome(ctx context.Context, params GetIncomeParams) (GetIncomeRes, error)
	// GetIncomeHistory implements getIncomeHistory operation.
	//
	// Get history for deposits by `user_id` and `currency`. Returns the history of all deposits
	// replenishments with the sender's address as `source_address` (if it could be determined).
	//
	// GET /v2/users/{user_id}/history
	GetIncomeHistory(ctx context.Context, params GetIncomeHistoryParams) (GetIncomeHistoryRes, error)
	// GetNewAddress implements getNewAddress operation.
	//
	// Generates new deposit address.
	//
	// POST /v2/address/new
	GetNewAddress(ctx context.Context, req *GetNewAddressReq) (GetNewAddressRes, error)
	// GetSync implements getSync operation.
	//
	// Get blockchain sync flag. Returns `true` if the service has up-to-date data from the blockchain.
	// As long as the flag is equal to `false`, no withdrawals are made.
	//
	// GET /v2/system/sync
	GetSync(ctx context.Context) (GetSyncRes, error)
	// GetWithdrawalStatus implements getWithdrawalStatus operation.
	//
	// Get withdrawal status. Returns `pending`, `processing`, `processed`.
	//
	// GET /v2/withdrawal/status
	GetWithdrawalStatus(ctx context.Context, params GetWithdrawalStatusParams) (GetWithdrawalStatusRes, error)
	// SendWithdrawal implements sendWithdrawal operation.
	//
	// Send withdrawal request. **Amount must be in base units without decimal point (NanoTONs for TONs)**.
	//
	// POST /v2/withdrawal/send
	SendWithdrawal(ctx context.Context, req *SendWithdrawalReq) (SendWithdrawalRes, error)
	// ServiceJettonWithdrawal implements serviceJettonWithdrawal operation.
	//
	// Send service withdrawal request. Withdraw all Jettons from Jetton wallet. Address calculated
	// through owner and Jetton master. Returns `memo` as comment for transfer message.
	//
	// POST /v2/withdrawal/service/jetton
	ServiceJettonWithdrawal(ctx context.Context, req *ServiceJettonWithdrawalReq) (ServiceJettonWithdrawalRes, error)
	// ServiceTonWithdrawal implements serviceTonWithdrawal operation.
	//
	// Send service withdrawal request. Withdraw all TONs from `from` address to hot wallet. Returns
	// `memo` as comment for transfer message.
	//
	// POST /v2/withdrawal/service/ton
	ServiceTonWithdrawal(ctx context.Context, req *ServiceTonWithdrawalReq) (ServiceTonWithdrawalRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
