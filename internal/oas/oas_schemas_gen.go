// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"github.com/go-faster/errors"
)

type BadRequest struct {
	Error string `json:"error"`
}

// GetError returns the value of Error.
func (s *BadRequest) GetError() string {
	return s.Error
}

// SetError sets the value of Error.
func (s *BadRequest) SetError(val string) {
	s.Error = val
}

func (*BadRequest) getDepositsRes()             {}
func (*BadRequest) getIncomeHistoryRes()        {}
func (*BadRequest) getIncomeRes()               {}
func (*BadRequest) getWithdrawalStatusRes()     {}
func (*BadRequest) makeNewDepositRes()          {}
func (*BadRequest) sendWithdrawalRes()          {}
func (*BadRequest) serviceJettonWithdrawalRes() {}
func (*BadRequest) serviceTonWithdrawalRes()    {}

type BearerAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

// Ref: #/components/schemas/CalculatedIncome
type CalculatedIncome struct {
	CountingSide CalculatedIncomeCountingSide `json:"counting_side"`
	TotalIncome  []TotalIncome                `json:"total_income"`
}

// GetCountingSide returns the value of CountingSide.
func (s *CalculatedIncome) GetCountingSide() CalculatedIncomeCountingSide {
	return s.CountingSide
}

// GetTotalIncome returns the value of TotalIncome.
func (s *CalculatedIncome) GetTotalIncome() []TotalIncome {
	return s.TotalIncome
}

// SetCountingSide sets the value of CountingSide.
func (s *CalculatedIncome) SetCountingSide(val CalculatedIncomeCountingSide) {
	s.CountingSide = val
}

// SetTotalIncome sets the value of TotalIncome.
func (s *CalculatedIncome) SetTotalIncome(val []TotalIncome) {
	s.TotalIncome = val
}

func (*CalculatedIncome) getIncomeRes() {}

type CalculatedIncomeCountingSide string

const (
	CalculatedIncomeCountingSideDeposit   CalculatedIncomeCountingSide = "deposit"
	CalculatedIncomeCountingSideHotWallet CalculatedIncomeCountingSide = "hot_wallet"
)

// MarshalText implements encoding.TextMarshaler.
func (s CalculatedIncomeCountingSide) MarshalText() ([]byte, error) {
	switch s {
	case CalculatedIncomeCountingSideDeposit:
		return []byte(s), nil
	case CalculatedIncomeCountingSideHotWallet:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CalculatedIncomeCountingSide) UnmarshalText(data []byte) error {
	switch CalculatedIncomeCountingSide(data) {
	case CalculatedIncomeCountingSideDeposit:
		*s = CalculatedIncomeCountingSideDeposit
		return nil
	case CalculatedIncomeCountingSideHotWallet:
		*s = CalculatedIncomeCountingSideHotWallet
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Deposit
type Deposit struct {
	Address  string `json:"address"`
	Currency string `json:"currency"`
}

// GetAddress returns the value of Address.
func (s *Deposit) GetAddress() string {
	return s.Address
}

// GetCurrency returns the value of Currency.
func (s *Deposit) GetCurrency() string {
	return s.Currency
}

// SetAddress sets the value of Address.
func (s *Deposit) SetAddress(val string) {
	s.Address = val
}

// SetCurrency sets the value of Currency.
func (s *Deposit) SetCurrency(val string) {
	s.Currency = val
}

func (*Deposit) makeNewDepositRes() {}

// Ref: #/components/schemas/Deposits
type Deposits struct {
	Deposits []Deposit `json:"deposits"`
}

// GetDeposits returns the value of Deposits.
func (s *Deposits) GetDeposits() []Deposit {
	return s.Deposits
}

// SetDeposits sets the value of Deposits.
func (s *Deposits) SetDeposits(val []Deposit) {
	s.Deposits = val
}

func (*Deposits) getDepositsRes() {}

// Ref: #/components/schemas/Income
type Income struct {
	DepositAddress string    `json:"deposit_address"`
	Time           int64     `json:"time"`
	SourceAddress  string    `json:"source_address"`
	Amount         string    `json:"amount"`
	Comment        OptString `json:"comment"`
}

// GetDepositAddress returns the value of DepositAddress.
func (s *Income) GetDepositAddress() string {
	return s.DepositAddress
}

// GetTime returns the value of Time.
func (s *Income) GetTime() int64 {
	return s.Time
}

// GetSourceAddress returns the value of SourceAddress.
func (s *Income) GetSourceAddress() string {
	return s.SourceAddress
}

// GetAmount returns the value of Amount.
func (s *Income) GetAmount() string {
	return s.Amount
}

// GetComment returns the value of Comment.
func (s *Income) GetComment() OptString {
	return s.Comment
}

// SetDepositAddress sets the value of DepositAddress.
func (s *Income) SetDepositAddress(val string) {
	s.DepositAddress = val
}

// SetTime sets the value of Time.
func (s *Income) SetTime(val int64) {
	s.Time = val
}

// SetSourceAddress sets the value of SourceAddress.
func (s *Income) SetSourceAddress(val string) {
	s.SourceAddress = val
}

// SetAmount sets the value of Amount.
func (s *Income) SetAmount(val string) {
	s.Amount = val
}

// SetComment sets the value of Comment.
func (s *Income) SetComment(val OptString) {
	s.Comment = val
}

// Ref: #/components/schemas/Incomes
type Incomes struct {
	Incomes []Income `json:"incomes"`
}

// GetIncomes returns the value of Incomes.
func (s *Incomes) GetIncomes() []Income {
	return s.Incomes
}

// SetIncomes sets the value of Incomes.
func (s *Incomes) SetIncomes(val []Income) {
	s.Incomes = val
}

func (*Incomes) getIncomeHistoryRes() {}

type InternalError struct {
	Error string `json:"error"`
}

// GetError returns the value of Error.
func (s *InternalError) GetError() string {
	return s.Error
}

// SetError sets the value of Error.
func (s *InternalError) SetError(val string) {
	s.Error = val
}

func (*InternalError) getDepositsRes()             {}
func (*InternalError) getIncomeHistoryRes()        {}
func (*InternalError) getIncomeRes()               {}
func (*InternalError) getSyncRes()                 {}
func (*InternalError) getWithdrawalStatusRes()     {}
func (*InternalError) makeNewDepositRes()          {}
func (*InternalError) sendWithdrawalRes()          {}
func (*InternalError) serviceJettonWithdrawalRes() {}
func (*InternalError) serviceTonWithdrawalRes()    {}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type SendWithdrawalReq struct {
	UserID      string    `json:"user_id"`
	QueryID     string    `json:"query_id"`
	Currency    string    `json:"currency"`
	Amount      string    `json:"amount"`
	Destination string    `json:"destination"`
	Comment     OptString `json:"comment"`
}

// GetUserID returns the value of UserID.
func (s *SendWithdrawalReq) GetUserID() string {
	return s.UserID
}

// GetQueryID returns the value of QueryID.
func (s *SendWithdrawalReq) GetQueryID() string {
	return s.QueryID
}

// GetCurrency returns the value of Currency.
func (s *SendWithdrawalReq) GetCurrency() string {
	return s.Currency
}

// GetAmount returns the value of Amount.
func (s *SendWithdrawalReq) GetAmount() string {
	return s.Amount
}

// GetDestination returns the value of Destination.
func (s *SendWithdrawalReq) GetDestination() string {
	return s.Destination
}

// GetComment returns the value of Comment.
func (s *SendWithdrawalReq) GetComment() OptString {
	return s.Comment
}

// SetUserID sets the value of UserID.
func (s *SendWithdrawalReq) SetUserID(val string) {
	s.UserID = val
}

// SetQueryID sets the value of QueryID.
func (s *SendWithdrawalReq) SetQueryID(val string) {
	s.QueryID = val
}

// SetCurrency sets the value of Currency.
func (s *SendWithdrawalReq) SetCurrency(val string) {
	s.Currency = val
}

// SetAmount sets the value of Amount.
func (s *SendWithdrawalReq) SetAmount(val string) {
	s.Amount = val
}

// SetDestination sets the value of Destination.
func (s *SendWithdrawalReq) SetDestination(val string) {
	s.Destination = val
}

// SetComment sets the value of Comment.
func (s *SendWithdrawalReq) SetComment(val OptString) {
	s.Comment = val
}

type ServiceJettonWithdrawalReq struct {
	Owner        string `json:"owner"`
	JettonMaster string `json:"jetton_master"`
}

// GetOwner returns the value of Owner.
func (s *ServiceJettonWithdrawalReq) GetOwner() string {
	return s.Owner
}

// GetJettonMaster returns the value of JettonMaster.
func (s *ServiceJettonWithdrawalReq) GetJettonMaster() string {
	return s.JettonMaster
}

// SetOwner sets the value of Owner.
func (s *ServiceJettonWithdrawalReq) SetOwner(val string) {
	s.Owner = val
}

// SetJettonMaster sets the value of JettonMaster.
func (s *ServiceJettonWithdrawalReq) SetJettonMaster(val string) {
	s.JettonMaster = val
}

type ServiceTonWithdrawalReq struct {
	From string `json:"from"`
}

// GetFrom returns the value of From.
func (s *ServiceTonWithdrawalReq) GetFrom() string {
	return s.From
}

// SetFrom sets the value of From.
func (s *ServiceTonWithdrawalReq) SetFrom(val string) {
	s.From = val
}

// Ref: #/components/schemas/ServiceWithdrawalMemo
type ServiceWithdrawalMemo struct {
	Memo string `json:"memo"`
}

// GetMemo returns the value of Memo.
func (s *ServiceWithdrawalMemo) GetMemo() string {
	return s.Memo
}

// SetMemo sets the value of Memo.
func (s *ServiceWithdrawalMemo) SetMemo(val string) {
	s.Memo = val
}

func (*ServiceWithdrawalMemo) serviceJettonWithdrawalRes() {}
func (*ServiceWithdrawalMemo) serviceTonWithdrawalRes()    {}

// Ref: #/components/schemas/SyncStatus
type SyncStatus struct {
	IsSynced bool `json:"is_synced"`
}

// GetIsSynced returns the value of IsSynced.
func (s *SyncStatus) GetIsSynced() bool {
	return s.IsSynced
}

// SetIsSynced sets the value of IsSynced.
func (s *SyncStatus) SetIsSynced(val bool) {
	s.IsSynced = val
}

func (*SyncStatus) getSyncRes() {}

// Ref: #/components/schemas/TotalIncome
type TotalIncome struct {
	DepositAddress string `json:"deposit_address"`
	Amount         string `json:"amount"`
	Currency       string `json:"currency"`
}

// GetDepositAddress returns the value of DepositAddress.
func (s *TotalIncome) GetDepositAddress() string {
	return s.DepositAddress
}

// GetAmount returns the value of Amount.
func (s *TotalIncome) GetAmount() string {
	return s.Amount
}

// GetCurrency returns the value of Currency.
func (s *TotalIncome) GetCurrency() string {
	return s.Currency
}

// SetDepositAddress sets the value of DepositAddress.
func (s *TotalIncome) SetDepositAddress(val string) {
	s.DepositAddress = val
}

// SetAmount sets the value of Amount.
func (s *TotalIncome) SetAmount(val string) {
	s.Amount = val
}

// SetCurrency sets the value of Currency.
func (s *TotalIncome) SetCurrency(val string) {
	s.Currency = val
}

type UnauthorizedError struct {
	Error string `json:"error"`
}

// GetError returns the value of Error.
func (s *UnauthorizedError) GetError() string {
	return s.Error
}

// SetError sets the value of Error.
func (s *UnauthorizedError) SetError(val string) {
	s.Error = val
}

func (*UnauthorizedError) getDepositsRes()             {}
func (*UnauthorizedError) getIncomeHistoryRes()        {}
func (*UnauthorizedError) getIncomeRes()               {}
func (*UnauthorizedError) getWithdrawalStatusRes()     {}
func (*UnauthorizedError) makeNewDepositRes()          {}
func (*UnauthorizedError) sendWithdrawalRes()          {}
func (*UnauthorizedError) serviceJettonWithdrawalRes() {}
func (*UnauthorizedError) serviceTonWithdrawalRes()    {}

// Ref: #/components/schemas/WithdrawalID
type WithdrawalID struct {
	ID int64 `json:"id"`
}

// GetID returns the value of ID.
func (s *WithdrawalID) GetID() int64 {
	return s.ID
}

// SetID sets the value of ID.
func (s *WithdrawalID) SetID(val int64) {
	s.ID = val
}

func (*WithdrawalID) sendWithdrawalRes() {}

// Ref: #/components/schemas/WithdrawalStatus
type WithdrawalStatus struct {
	Status WithdrawalStatusStatus `json:"status"`
}

// GetStatus returns the value of Status.
func (s *WithdrawalStatus) GetStatus() WithdrawalStatusStatus {
	return s.Status
}

// SetStatus sets the value of Status.
func (s *WithdrawalStatus) SetStatus(val WithdrawalStatusStatus) {
	s.Status = val
}

func (*WithdrawalStatus) getWithdrawalStatusRes() {}

type WithdrawalStatusStatus string

const (
	WithdrawalStatusStatusPending    WithdrawalStatusStatus = "pending"
	WithdrawalStatusStatusProcessing WithdrawalStatusStatus = "processing"
	WithdrawalStatusStatusProcessed  WithdrawalStatusStatus = "processed"
)

// MarshalText implements encoding.TextMarshaler.
func (s WithdrawalStatusStatus) MarshalText() ([]byte, error) {
	switch s {
	case WithdrawalStatusStatusPending:
		return []byte(s), nil
	case WithdrawalStatusStatusProcessing:
		return []byte(s), nil
	case WithdrawalStatusStatusProcessed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WithdrawalStatusStatus) UnmarshalText(data []byte) error {
	switch WithdrawalStatusStatus(data) {
	case WithdrawalStatusStatusPending:
		*s = WithdrawalStatusStatusPending
		return nil
	case WithdrawalStatusStatusProcessing:
		*s = WithdrawalStatusStatusProcessing
		return nil
	case WithdrawalStatusStatusProcessed:
		*s = WithdrawalStatusStatusProcessed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
