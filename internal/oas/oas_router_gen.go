// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}
	if prefix := s.cfg.Prefix; len(prefix) > 0 {
		if strings.HasPrefix(elem, prefix) {
			// Cut prefix from the path.
			elem = strings.TrimPrefix(elem, prefix)
		} else {
			// Prefix doesn't match.
			s.notFound(w, r)
			return
		}
	}
	if len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [1]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/v2/"
			if l := len("/v2/"); len(elem) >= l && elem[0:l] == "/v2/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "address/new"
				if l := len("address/new"); len(elem) >= l && elem[0:l] == "address/new" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "POST":
						s.handleGetNewAddressRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}
			case 's': // Prefix: "system/sync"
				if l := len("system/sync"); len(elem) >= l && elem[0:l] == "system/sync" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleGetSyncRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
			case 'u': // Prefix: "users/"
				if l := len("users/"); len(elem) >= l && elem[0:l] == "users/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "user_id"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "addresses"
						if l := len("addresses"); len(elem) >= l && elem[0:l] == "addresses" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetAddressesRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					case 'h': // Prefix: "history"
						if l := len("history"); len(elem) >= l && elem[0:l] == "history" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetIncomeHistoryRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					case 'i': // Prefix: "income"
						if l := len("income"); len(elem) >= l && elem[0:l] == "income" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetIncomeRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					}
				}
			case 'w': // Prefix: "withdrawal/s"
				if l := len("withdrawal/s"); len(elem) >= l && elem[0:l] == "withdrawal/s" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "e"
					if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'n': // Prefix: "nd"
						if l := len("nd"); len(elem) >= l && elem[0:l] == "nd" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleSendWithdrawalRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					case 'r': // Prefix: "rvice/"
						if l := len("rvice/"); len(elem) >= l && elem[0:l] == "rvice/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'j': // Prefix: "jetton"
							if l := len("jetton"); len(elem) >= l && elem[0:l] == "jetton" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleServiceJettonWithdrawalRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
						case 't': // Prefix: "ton"
							if l := len("ton"); len(elem) >= l && elem[0:l] == "ton" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleServiceTonWithdrawalRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
						}
					}
				case 't': // Prefix: "tatus"
					if l := len("tatus"); len(elem) >= l && elem[0:l] == "tatus" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetWithdrawalStatusRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
				}
			}
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	operationID string
	pathPattern string
	count       int
	args        [1]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/v2/"
			if l := len("/v2/"); len(elem) >= l && elem[0:l] == "/v2/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "address/new"
				if l := len("address/new"); len(elem) >= l && elem[0:l] == "address/new" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "POST":
						// Leaf: GetNewAddress
						r.name = "GetNewAddress"
						r.operationID = "getNewAddress"
						r.pathPattern = "/v2/address/new"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
			case 's': // Prefix: "system/sync"
				if l := len("system/sync"); len(elem) >= l && elem[0:l] == "system/sync" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						// Leaf: GetSync
						r.name = "GetSync"
						r.operationID = "getSync"
						r.pathPattern = "/v2/system/sync"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
			case 'u': // Prefix: "users/"
				if l := len("users/"); len(elem) >= l && elem[0:l] == "users/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "user_id"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "addresses"
						if l := len("addresses"); len(elem) >= l && elem[0:l] == "addresses" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: GetAddresses
								r.name = "GetAddresses"
								r.operationID = "getAddresses"
								r.pathPattern = "/v2/users/{user_id}/addresses"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					case 'h': // Prefix: "history"
						if l := len("history"); len(elem) >= l && elem[0:l] == "history" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: GetIncomeHistory
								r.name = "GetIncomeHistory"
								r.operationID = "getIncomeHistory"
								r.pathPattern = "/v2/users/{user_id}/history"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					case 'i': // Prefix: "income"
						if l := len("income"); len(elem) >= l && elem[0:l] == "income" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: GetIncome
								r.name = "GetIncome"
								r.operationID = "getIncome"
								r.pathPattern = "/v2/users/{user_id}/income"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					}
				}
			case 'w': // Prefix: "withdrawal/s"
				if l := len("withdrawal/s"); len(elem) >= l && elem[0:l] == "withdrawal/s" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'e': // Prefix: "e"
					if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'n': // Prefix: "nd"
						if l := len("nd"); len(elem) >= l && elem[0:l] == "nd" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: SendWithdrawal
								r.name = "SendWithdrawal"
								r.operationID = "sendWithdrawal"
								r.pathPattern = "/v2/withdrawal/send"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 'r': // Prefix: "rvice/"
						if l := len("rvice/"); len(elem) >= l && elem[0:l] == "rvice/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'j': // Prefix: "jetton"
							if l := len("jetton"); len(elem) >= l && elem[0:l] == "jetton" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									// Leaf: ServiceJettonWithdrawal
									r.name = "ServiceJettonWithdrawal"
									r.operationID = "serviceJettonWithdrawal"
									r.pathPattern = "/v2/withdrawal/service/jetton"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						case 't': // Prefix: "ton"
							if l := len("ton"); len(elem) >= l && elem[0:l] == "ton" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									// Leaf: ServiceTonWithdrawal
									r.name = "ServiceTonWithdrawal"
									r.operationID = "serviceTonWithdrawal"
									r.pathPattern = "/v2/withdrawal/service/ton"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						}
					}
				case 't': // Prefix: "tatus"
					if l := len("tatus"); len(elem) >= l && elem[0:l] == "tatus" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: GetWithdrawalStatus
							r.name = "GetWithdrawalStatus"
							r.operationID = "getWithdrawalStatus"
							r.pathPattern = "/v2/withdrawal/status"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				}
			}
		}
	}
	return r, false
}
