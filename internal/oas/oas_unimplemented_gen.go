// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"context"

	ht "github.com/ogen-go/ogen/http"
)

// UnimplementedHandler is no-op Handler which returns http.ErrNotImplemented.
type UnimplementedHandler struct{}

var _ Handler = UnimplementedHandler{}

// GetDeposits implements getDeposits operation.
//
// Get all created addresses by `user_id`.
//
// GET /v2/users/{user_id}/deposits
func (UnimplementedHandler) GetDeposits(ctx context.Context, params GetDepositsParams) (r GetDepositsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetIncome implements getIncome operation.
//
// Get income for deposits by `user_id`. The total amount of funds that came to the deposit for the
// entire time. Funds sent from the deposit to the hot wallet or all funds received to the deposit
// are taken into account, depending on the service settings. Counting side field options
// `hot_wallet`, `deposit`.
//
// GET /v2/users/{user_id}/income
func (UnimplementedHandler) GetIncome(ctx context.Context, params GetIncomeParams) (r GetIncomeRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetIncomeHistory implements getIncomeHistory operation.
//
// Get history for deposits by `user_id` and `currency`. Returns the history of all deposits
// replenishments with the sender's address as `source_address` (if it could be determined).
//
// GET /v2/users/{user_id}/history
func (UnimplementedHandler) GetIncomeHistory(ctx context.Context, params GetIncomeHistoryParams) (r GetIncomeHistoryRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetSync implements getSync operation.
//
// Get blockchain sync flag. Returns `true` if the service has up-to-date data from the blockchain.
// As long as the flag is equal to `false`, no withdrawals are made.
//
// GET /v2/system/sync
func (UnimplementedHandler) GetSync(ctx context.Context) (r GetSyncRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetWithdrawalStatus implements getWithdrawalStatus operation.
//
// Get withdrawal status. Returns `pending`, `processing`, `processed`.
//
// GET /v2/withdrawal/status
func (UnimplementedHandler) GetWithdrawalStatus(ctx context.Context, params GetWithdrawalStatusParams) (r GetWithdrawalStatusRes, _ error) {
	return r, ht.ErrNotImplemented
}

// MakeNewDeposit implements makeNewDeposit operation.
//
// Generates new deposit address.
//
// POST /v2/users/{user_id}/deposits/new
func (UnimplementedHandler) MakeNewDeposit(ctx context.Context, params MakeNewDepositParams) (r MakeNewDepositRes, _ error) {
	return r, ht.ErrNotImplemented
}

// SendWithdrawal implements sendWithdrawal operation.
//
// Send withdrawal request. **Amount must be in base units without decimal point (NanoTONs for TONs)**.
//
// POST /v2/withdrawal/send
func (UnimplementedHandler) SendWithdrawal(ctx context.Context, req *SendWithdrawalReq) (r SendWithdrawalRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ServiceJettonWithdrawal implements serviceJettonWithdrawal operation.
//
// Send service withdrawal request. Withdraw all Jettons from Jetton wallet. Address calculated
// through owner and Jetton master. Returns `memo` as comment for transfer message.
//
// POST /v2/withdrawal/service/jetton
func (UnimplementedHandler) ServiceJettonWithdrawal(ctx context.Context, req *ServiceJettonWithdrawalReq) (r ServiceJettonWithdrawalRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ServiceTonWithdrawal implements serviceTonWithdrawal operation.
//
// Send service withdrawal request. Withdraw all TONs from `from` address to hot wallet. Returns
// `memo` as comment for transfer message.
//
// POST /v2/withdrawal/service/ton
func (UnimplementedHandler) ServiceTonWithdrawal(ctx context.Context, req *ServiceTonWithdrawalReq) (r ServiceTonWithdrawalRes, _ error) {
	return r, ht.ErrNotImplemented
}
