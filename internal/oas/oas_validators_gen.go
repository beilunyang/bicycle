// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s *CalculatedIncome) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.CountingSide.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "counting_side",
			Error: err,
		})
	}
	if err := func() error {
		if s.TotalIncome == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "total_income",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CalculatedIncomeCountingSide) Validate() error {
	switch s {
	case "deposit":
		return nil
	case "hot_wallet":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *Deposits) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Deposits == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "deposits",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *Incomes) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Incomes == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "incomes",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *WithdrawalStatus) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s WithdrawalStatusStatus) Validate() error {
	switch s {
	case "pending":
		return nil
	case "processing":
		return nil
	case "processed":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
